
#line 3 "scanner.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 163
#define YY_END_OF_BUFFER 164
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1388] =
    {   0,
      164,   67,  163,   66,   67,  163,   65,  163,   67,  163,
       62,   67,  163,   63,   67,  163,   61,   62,   67,  163,
       61,   62,   67,  163,   40,   61,   62,   67,  163,   16,
       61,   62,   67,  163,   44,   61,   62,   67,  163,   13,
       61,   62,   67,  163,   22,   61,   62,   67,  163,    9,
       61,   62,   67,  163,   53,   61,   62,   67,  163,   15,
       61,   62,   67,  163,   11,   61,   62,   67,  163,   20,
       61,   62,   67,  163,   61,   62,   67,  163,   39,   61,
       62,   67,  163,   51,   61,   62,   67,  163,   55,   61,
       62,   67,  163,    6,   61,   62,   67,  163,   58,   61,

       62,   67,  163,   61,   62,   67,  163,   72,   74,  163,
    16454,   73,   74,  163,   75,  163,   74,  163,   72,   74,
      163,16454,   68,   74,  163,16454,   71,   72,   74,  163,
    16454,   79,   81,  163,   80,   81,  163,   82,  163,   81,
      163,   79,   81,  163,   76,   81,  163,   78,   79,   81,
      163,   87,  163,   86,  163,   87,  163,   85,   87,  163,
       83,   87,  163,   98,  163,   97,   98,  163,  100,  163,
       98,  163,   96,   98,  163,  103,  163,  102,  103,  163,
      105,  163,  103,  163,  101,  103,  163,  108,  163,  107,
      108,  163,  110,  163,  108,  163,  106,  108,  163,  133,

      163,  132,  133,  163,  135,  163,  133,  163,  131,  133,
      163,  133,  163,  133,  163,  133,  163,  133,  163,  133,
      163,  133,  163,  133,  163,  133,  163,  133,  163,  133,
      163,  133,  163,  136,  163,  138,  163,  139,  163,   94,
      163,   93,  163,   94,  163,   91,   94,  163,   92,   94,
      163,   88,   94,  163,  143,  163,  142,  143,  163,  145,
      163,  143,  163,  141,  143,  163,  141,  143,  163,  149,
      163,  148,  149,  163,  151,  163,  149,  163,  147,  149,
      163,  147,  149,  163,  163,   95,  163,  154,  163,  153,
      154,  163,  156,  163,  154,  163,  152,  154,  163,  160,

      163,  159,  160,  163,  162,  163,  160,  163,  157,  160,
      163,  158,  160,  163,   64,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   55,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   72,16454,16454, 8262,   72,16454,   69,   79,   79,
       77,   86,   85,   84,   99,   96,  104,  101,  109,  106,

      134,  131,  136,  137,   93,   91,   92,   90,   89,  144,
      141,  141,  150,  147,  147,  155,  152,  161,  157,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   58,   61,   62,   61,   62,   61,   62,   96,   96,

      121,  125,  129,  119,  115,  130,  118,  124,  123,  120,
      122,  111,  128,  127,  116,  126,  117,  114,  112,  113,
      140,  141,  147,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   17,   61,   62,   18,   61,
       62,   61,   62,   61,   62,   61,   62,   22,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       35,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   47,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,

       61,   62,   61,   62,   61,   62,   61,   62,   96,   96,
      147,   61,   62,   61,   62,    5,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       20,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   46,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   96,   96,  147,    1,

       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   48,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   96,   96,  146,  147,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,    9,   61,   62,   61,   62,

       11,   61,   62,   61,   62,   61,   62,   21,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   31,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   43,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   51,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   59,   61,   62,   61,   62,   96,   96,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,

       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       30,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   39,   61,   62,   61,   62,   41,   61,   62,   42,
       61,   62,   61,   62,   61,   62,   61,   62,   49,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   96,   96,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   10,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,

       61,   62,   38,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   53,   61,   62,
       54,   61,   62,   61,   62,   61,   62,   61,   62,   96,
       61,   62,   61,   62,    4,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   19,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       57,   61,   62,   61,   62,   96,   61,   62,   61,   62,

       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   23,   61,   62,   61,
       62,   61,   62,   25,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       40,   61,   62,   61,   62,   45,   61,   62,   61,   62,
       61,   62,   61,   62,   56,   61,   62,   61,   62,   61,
       62,   61,   62,    6,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   16,   61,
       62,   24,   61,   62,   26,   61,   62,   27,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,

       36,   61,   62,   61,   62,   61,   62,   50,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
        8,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   34,
       61,   62,   61,   62,   37,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   15,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
        2,   61,   62,    3,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,

       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   13,   61,   62,   14,   61,   62,   61,   62,
       61,   62,   61,   62,   61,   62,   61,   62,   61,   62,
       60,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   61,   62,   61,
       62,   61,   62,   61,   62,   61,   62,   32,   61,   62,
       61,   62,   61,   62,   52,   61,   62,    7,   61,   62,
       12,   61,   62,   28,   61,   62,   61,   62,   33,   61,
       62,   44,   61,   62,   29,   61,   62
    } ;

static yyconst flex_int16_t yy_accept[715] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    7,    9,   11,   14,   17,   21,   25,
       30,   35,   40,   45,   50,   55,   60,   65,   70,   75,
       79,   84,   89,   94,   99,  104,  108,  112,  115,  117,
      119,  123,  127,  132,  135,  138,  140,  142,  145,  148,
      152,  154,  156,  158,  161,  164,  166,  169,  171,  173,
      176,  178,  181,  183,  185,  188,  190,  193,  195,  197,
      200,  202,  205,  207,  209,  212,  214,  216,  218,  220,

      222,  224,  226,  228,  230,  232,  234,  236,  238,  240,
      242,  244,  246,  249,  252,  255,  257,  260,  262,  264,
      267,  270,  272,  275,  277,  279,  282,  285,  286,  288,
      290,  293,  295,  297,  300,  302,  305,  307,  309,  312,
      315,  316,  317,  319,  321,  323,  325,  327,  329,  331,
      333,  335,  337,  339,  341,  343,  345,  347,  349,  351,
      353,  355,  357,  359,  361,  363,  365,  367,  369,  372,
      374,  376,  378,  380,  382,  384,  384,  385,  386,  386,
      388,  389,  390,  390,  391,  392,  392,  393,  393,  394,
      394,  395,  396,  396,  397,  398,  399,  400,  401,  402,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  404,
      405,  405,  406,  406,  407,  408,  408,  409,  410,  411,
      412,  413,  414,  415,  416,  417,  418,  419,  420,  422,
      424,  426,  428,  430,  432,  434,  436,  438,  440,  442,
      444,  446,  448,  450,  452,  454,  456,  458,  460,  462,
      464,  466,  468,  470,  472,  474,  476,  478,  480,  482,
      484,  486,  488,  490,  492,  495,  497,  499,  499,  500,
      501,  502,  503,  504,  505,  506,  507,  508,  509,  510,
      511,  512,  513,  514,  515,  516,  517,  518,  519,  520,

      521,  523,  524,  526,  528,  530,  532,  534,  536,  539,
      542,  544,  546,  548,  551,  553,  555,  557,  559,  561,
      563,  565,  567,  569,  571,  574,  576,  578,  580,  582,
      584,  586,  589,  591,  593,  595,  597,  599,  601,  603,
      605,  607,  609,  610,  611,  612,  614,  616,  619,  621,
      623,  625,  627,  629,  631,  634,  636,  638,  640,  642,
      644,  646,  648,  650,  652,  654,  656,  658,  660,  662,
      664,  666,  668,  670,  673,  675,  677,  679,  681,  683,
      685,  687,  689,  691,  693,  695,  697,  698,  699,  700,
      703,  705,  707,  709,  711,  713,  715,  717,  719,  721,

      723,  725,  727,  729,  731,  733,  735,  737,  739,  741,
      743,  745,  747,  749,  751,  753,  755,  757,  760,  762,
      764,  766,  768,  770,  772,  774,  776,  778,  780,  782,
      783,  784,  786,  788,  790,  792,  794,  796,  799,  801,
      804,  806,  808,  811,  813,  815,  817,  819,  821,  823,
      825,  827,  830,  832,  834,  836,  838,  840,  842,  844,
      846,  848,  851,  853,  855,  857,  859,  862,  864,  866,
      868,  870,  872,  875,  877,  878,  879,  881,  883,  885,
      887,  889,  891,  893,  895,  897,  899,  901,  903,  905,
      907,  909,  911,  914,  916,  918,  920,  922,  925,  927,

      930,  933,  935,  937,  939,  942,  944,  946,  948,  950,
      952,  954,  956,  957,  958,  960,  962,  964,  966,  968,
      970,  973,  975,  977,  979,  981,  983,  985,  987,  989,
      991,  993,  995,  997,  999, 1001, 1003, 1006, 1008, 1010,
     1012, 1014, 1016, 1018, 1021, 1024, 1026, 1028, 1030, 1031,
     1033, 1035, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052,
     1054, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073,
     1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1094,
     1096, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113,
     1115, 1117, 1120, 1122, 1124, 1127, 1129, 1131, 1133, 1135,

     1137, 1139, 1141, 1144, 1146, 1149, 1151, 1153, 1155, 1158,
     1160, 1162, 1164, 1167, 1169, 1171, 1173, 1175, 1177, 1179,
     1182, 1185, 1188, 1191, 1193, 1195, 1197, 1199, 1201, 1204,
     1206, 1208, 1211, 1213, 1215, 1217, 1219, 1221, 1224, 1226,
     1228, 1230, 1232, 1234, 1236, 1238, 1240, 1243, 1245, 1248,
     1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264, 1267, 1269,
     1271, 1273, 1275, 1277, 1279, 1281, 1284, 1287, 1289, 1291,
     1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311,
     1313, 1316, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 1334,
     1336, 1338, 1340, 1342, 1344, 1346, 1348, 1350, 1352, 1354,

     1356, 1358, 1361, 1363, 1365, 1368, 1371, 1374, 1377, 1379,
     1382, 1385, 1388, 1388
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    5,    1,    5,    7,
        8,    9,    5,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
        1,   17,   12,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   44,    1,    5,    5,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   12,    1,   12,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    2,    3,    3,    4,    5,    6,    6,    4,    7,
        8,    9,    8,   10,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   16,   17,   14,   14,   14,   14,   14,
       14,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15
    } ;

static yyconst flex_int16_t yy_base[763] =
    {   0,
        0,   45,  116,  161,  206,  251,  134,  138,  296,  341,
       17,   21,   24,   27,  385,  452,    6,   30,  142,  144,
      520,  584,  648,  697,  676,  675,  745,  795,  846,  891,
      681, 2256, 2256, 2256,  673,    0, 2256,    0,  344,    0,
      210,  108,  162,   92,   98,    0,    0,  140,  108,  164,
      347,  223,  170,  180,  127,  201,  178, 2256, 2256, 2256,
      936,  119,  981,    0, 2256, 2256, 2256,  274, 2256,  315,
      187, 2256,  672, 2256,  664, 2256, 2256, 2256,  638,  627,
     2256, 2256, 2256,  633,    0, 2256, 2256, 2256,  628,  614,
     2256, 2256, 2256,  623,  611,  254,  150,  341,  168,  381,

      382,  202,  216,  440,  352,  221,    0, 2256,  620,  276,
     2256,  619, 2256, 2256,   31, 2256, 2256, 2256,  618,    0,
      307, 2256, 2256, 2256,  615,    0,  308, 2256, 2256, 2256,
     2256, 2256,  567,    0, 2256, 2256, 2256,  560,    0, 2256,
     2256,    0,    0,  318,  345,  331,  384,  389,  401,  387,
      394,  410,  400,  403,  550,  397,  437,  422,  454,  445,
      449,  518,  442,  459,  450,  458,  520,  484,    0,  482,
      518,  525,  509,  505,  231,  276,  322, 2256,  545, 1026,
     2256,    0,  543,  601, 2256,  571, 2256,  555, 2256,  551,
     2256, 2256,    0,  539, 2256,    0, 2256,  489, 2256,  481,

      513,  526,  534,  585,  579,  569,  576,  581,  624,  580,
      575,  582,  588,  597,  612,  606,  635,  640,    0, 2256,
      670, 2256,  490, 2256, 2256,   34, 2256, 2256, 2256,    0,
      634, 2256,    0,  644, 2256,    0, 2256,    0,  657,  645,
      650,  663,  662,  665,  672,  695,  690,  692,  698,  695,
      691,  454,  705,  449,  711,  696,  698,  740,  702,  734,
      741,  752,  746,  738,  742,  745,  749,  745,  429,  796,
      794,  806,  791,  796,    0,  805,  420,  118,  416,  384,
     2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256,
     2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256, 2256,

        0,  815,  805,  802,  800,  850,  374,  855,    0,    0,
      839,  839,  846,    0,  861,  861,  371,  863,  855,  851,
      866,  854,  872,  854,    0,  884,  886,  914,  904,  885,
      907,    0,  909,  919,  911,  914,  907,  904,  913,  370,
      938,  948,  368,  365,  935,  935,  362,  361,  944,  941,
      951,  958,  948,  360,    0,  963,  953,  958,  952,  960,
      976,  986,  986,  985,  996,  327,  996, 1000, 1000,  322,
      985,  987,  320,    0,  988, 1004,  994, 1023, 1027, 1018,
     1019, 1018, 1023, 1039, 1027, 1022,  318,  304, 1024,  284,
     1036, 1042, 1028, 1040, 1046, 1031, 1032, 1046, 1037, 1047,

     1043, 1057, 1047, 1044, 1056, 1076, 1062, 1060, 1085,  281,
     1073, 1089, 1090, 1076, 1077, 1094, 1099,    0, 1096, 1103,
      275, 1085, 1097, 1087, 1107, 1096, 1105, 1108, 1096,  262,
      230,    0, 1114, 1103, 1096, 1121, 1111,    0, 1132,    0,
      228, 1127,    0, 1117, 1125, 1131, 1141, 1150, 1132, 1135,
     1130,    0, 1135, 1152, 1141, 1139, 1146, 1158, 1144, 1149,
      225,    0, 1161,  207, 1161, 1158,    0, 1156, 1168, 1161,
     1157, 1177,    0, 1178,  194,  182, 1179, 1193, 1191, 1193,
     1201, 1204, 1191, 1203, 1203,  178, 1210, 1193, 1195, 1196,
     1212, 1200,    0, 1199, 1203, 1209, 1225,    0,  175,    0,

        0, 1224, 1209, 1212,    0, 1230, 1218, 1238, 1233, 1230,
     1239, 1249,  172,  149, 1257, 1247, 1247, 1249, 1263, 1245,
        0, 1258, 1254, 1268, 1246, 1257, 1254, 1257, 1267, 1274,
     1271, 1279, 1279, 1277, 1265, 1266,    0, 1292, 1289, 1300,
     1291, 1289, 1301,    0,    0, 1311, 1297, 1304,  146, 1304,
     1313,    0, 1301, 1303, 1315, 1306, 1324, 1314, 1315, 1314,
        0, 1316, 1328, 1320, 1317, 1324,  129, 1336, 1356, 1332,
     1322, 1325, 1335, 1344, 1344, 1363, 1357, 1369,    0, 1354,
       33, 1371, 1355, 1358, 1370, 1365, 1365, 1368, 1377, 1378,
     1381,    0, 1368, 1374,    0, 1377, 1383,   25, 1381, 1378,

     1379, 1393,    0, 1390,    0, 1390, 1409, 1404,    0, 1412,
     1413, 1426,    0, 1413, 1415, 1415, 1427, 1411, 1413,    0,
        0,    0,    0, 1431, 1427, 1417, 1430, 1435,    0, 1426,
     1437,    0,    3, 1440, 1430, 1440, 1434,    0, 1432, 1443,
     1452, 1446, 1457, 1462, 1464, 1448,    0, 1458,    0, 1459,
     1482, 1477, 1480,    1, 1477, 1473, 1481,    0, 1475, 1486,
     1489, 1492, 1486, 1476, 1477,    0,    0, 1489, 1479, 1493,
     1498, 1484, 1493, 1507, 1489, 1490, 1517, 1517, 1515, 1521,
        0,    0, 1524, 1514, 1519, 1531, 1532, 1522,    0, 1537,
     1529, 1525, 1538, 1543, 1534, 1536, 1547, 1538, 1540, 1530,

     1536,    0, 1545, 1546,    0,    0,    0,    0, 1538,    0,
        0,    0, 2256, 1608, 1625, 1642, 1659, 1676, 1693, 1710,
     1727, 1744, 1761, 1778, 1795, 1812, 1829, 1846, 1860, 1872,
     1887, 1904, 1921, 1938, 1955, 1972, 1989, 1999, 2011, 2028,
     2045, 2062,  311, 2075, 2083, 2094, 2109, 2123,  321, 2132,
     2141, 2150, 2159, 2168, 2177, 2186, 2195, 2204, 2213, 2222,
     2231, 2240
    } ;

static yyconst flex_int16_t yy_def[763] =
    {   0,
      714,  713,  715,  715,  716,  716,  717,  717,  718,  718,
      719,  719,  720,  720,  721,  721,  722,  722,  723,  723,
      724,  724,  725,  725,  726,  726,  727,  727,  728,  728,
      713,  713,  713,  713,  713,  729,  713,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  731,  713,  713,  713,
      732,  733,  732,  734,  713,  713,  713,  735,  713,  735,
      736,  713,  737,  713,  713,  713,  713,  713,  713,  738,
      713,  713,  713,  713,  739,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,

      713,  713,  713,  713,  713,  713,  740,  713,  713,  741,
      713,  742,  713,  713,  713,  713,  713,  713,  713,  743,
      743,  713,  713,  713,  713,  744,  744,  713,  713,  713,
      713,  713,  713,  745,  713,  713,  713,  713,  746,  713,
      713,  729,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  731,  713,  733,  713,  747,  732,
      713,  734,  748,  735,  713,  736,  713,  737,  713,  713,
      713,  713,  749,  750,  713,  739,  713,  713,  713,  713,

      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  740,  713,
      741,  713,  742,  713,  713,  713,  713,  713,  713,  743,
      743,  713,  744,  744,  713,  745,  713,  746,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  747,  751,  752,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,

      743,  744,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  753,  754,  744,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  755,  756,  744,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  757,
      758,  744,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  759,  760,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  761,  713,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  762,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      713,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,    0,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713
    } ;

static yyconst flex_int16_t yy_nxt[2328] =
    {   0,
       32,   33,   34,   35,  713,   37,   32,   32,  108,  109,
      668,   32,  650,   32,   32,   32,   32,   81,   82,   83,
       84,   81,   82,   83,   84,   87,   88,   89,   87,   88,
       89,   81,  108,  109,  625,   81,   90,  227,  228,   90,
      227,  228,  193,   32,   32,   32,   33,   34,   35,   38,
       37,   32,   32,   38,   38,   38,   32,   38,   32,   32,
       32,   32,   39,   40,   41,   42,   43,   44,   38,   38,
       45,   38,   46,   47,   48,   38,   49,   50,   38,   51,
       52,   53,   54,   55,   56,   38,   38,   38,   32,   32,
       39,   40,   41,   42,   43,   44,   38,   38,   45,   38,

       46,   47,   48,   38,   49,   50,   38,   51,   52,   53,
       54,   55,   56,   38,   38,   38,   57,   58,   59,   60,
      176,   62,   57,   57,   63,  150,  154,   57,  155,   57,
       57,   60,   60,  181,  713,  178,   72,   73,  597,   74,
       72,   73,  158,   74,  111,  112,  111,  112,  113,  114,
      113,  114,  172,  150,  154,  193,  155,  156,  193,   57,
       57,   57,   58,   59,   60,  157,   62,   57,   57,   63,
      158,  203,   57,  159,   57,   57,   60,   60,   75,  176,
      172,  193,   75,  177,  538,  156,  115,  527,  115,  187,
      188,  193,  189,  157,  178,  168,  151,  206,  160,  203,

      152,  169,  153,  193,   57,   57,   64,   65,   66,   67,
      170,   69,   64,   64,   70,  171,  504,   64,  173,   64,
       67,   67,   67,  168,  151,  206,  160,  147,  152,  169,
      153,  190,  176,  211,  502,  212,  177,  484,  170,  193,
      174,  148,  218,  171,  165,  149,  173,  178,  166,   64,
       64,   64,   65,   66,   67,  147,   69,   64,   64,   70,
      167,  211,   64,  212,   64,   67,   67,   67,  174,  148,
      218,  193,  165,  149,  182,  183,  166,  176,  222,  223,
      182,  182,  224,  225,  466,  182,  201,  182,  167,  185,
      455,  202,  178,  433,   64,   64,   76,   77,   78,   79,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,  193,  201,  182,  183,  182,  182,  202,
      226,  182,  182,  176,  230,  230,  182,  193,  182,  417,
      185,  414,  231,  234,  279,  279,  409,  239,  178,   76,
       76,   76,   77,   78,   79,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  182,  182,
      231,  234,  204,  144,  161,  239,  240,  242,  162,  398,
      392,  391,  145,  241,  193,  205,  216,  193,  163,  384,
      359,  146,  164,  351,   76,   76,   92,   93,   94,  217,
      204,  144,  161,  193,  240,  242,  162,   95,  207,  209,

      145,  241,   96,  205,  216,   97,  163,   98,   99,  146,
      164,  100,  243,  210,  101,  102,  103,  217,  208,  244,
      104,  105,  245,  246,  106,  193,  207,  209,  247,  342,
       96,  248,  249,   97,  250,   98,   99,  252,  334,  100,
      243,  210,  101,  102,  103,  255,  208,  244,  104,  105,
      245,  246,  106,   92,   93,   94,  247,  213,  318,  248,
      249,  214,  250,  316,   95,  252,  253,  254,  260,   96,
      258,  256,   97,  255,   98,   99,  259,  215,  100,  266,
      267,  101,  102,  103,  268,  213,  257,  104,  105,  214,
      269,  106,  222,  200,  253,  254,  260,   96,  258,  256,

       97,  198,   98,   99,  259,  215,  100,  266,  267,  101,
      102,  103,  268,  272,  257,  104,  105,  273,  269,  106,
      116,  117,  118,  119,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  261,  270,  274,
      262,  272,  275,  276,  277,  273,  179,  281,  193,  282,
      263,  264,  271,  283,  265,  121,  191,  187,  185,  251,
      181,  178,  237,  116,  116,  261,  270,  274,  262,  235,
      275,  276,  277,  187,  188,  281,  189,  282,  263,  264,
      271,  283,  265,  121,  116,  117,  118,  119,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      116,  182,  183,  284,  285,  286,  287,  182,  182,  288,
      292,  289,  182,  293,  182,  190,  185,  232,  294,  121,
      229,  222,  220,  200,  295,  199,  198,  116,  116,  296,
      197,  284,  285,  286,  287,  195,  193,  288,  292,  289,
      192,  293,  297,  298,  182,  182,  294,  121,  122,  123,
      124,  125,  295,  122,  122,  122,  299,  296,  290,  122,
      300,  122,  122,  122,  122,  291,  301,  302,  127,  191,
      297,  298,  222,  223,  187,  141,  224,  225,  303,  304,
      713,  305,  129,  129,  299,  713,  290,  306,  300,  713,
      307,  122,  122,  291,  301,  302,  127,  122,  123,  124,

      125,  308,  122,  122,  122,  309,  303,  304,  122,  305,
      122,  122,  122,  122,  226,  306,  310,  127,  307,  713,
      713,  311,  312,  313,  314,  315,  317,  713,  319,  308,
      713,  320,  321,  309,  713,  713,  713,  713,  713,  713,
      122,  122,  324,  713,  310,  127,  131,  132,  133,  311,
      312,  313,  314,  315,  317,  134,  319,  134,  134,  320,
      321,  325,  134,  134,  134,  134,  134,  134,  713,  713,
      324,  322,  326,  327,  328,  329,  330,  713,  323,  713,
      713,  331,  332,  333,  713,  713,  713,  713,  713,  325,
      134,  134,  134,  134,  134,  134,  131,  132,  133,  322,

      326,  327,  328,  329,  330,  134,  323,  134,  134,  331,
      332,  333,  134,  134,  134,  134,  134,  134,  713,  713,
      713,  713,  335,  713,  713,  713,  337,  338,  339,  713,
      340,  336,  713,  713,  713,  341,  345,  346,  347,  348,
      134,  134,  134,  134,  134,  134,  135,  136,  137,  138,
      335,  140,  135,  135,  337,  338,  339,  135,  340,  336,
      135,  135,  135,  341,  345,  346,  347,  348,  713,  713,
      713,  349,  352,  354,  713,  355,  353,  713,  713,  713,
      356,  350,  357,  358,  360,  361,  362,  363,  364,  365,
      135,  135,  136,  137,  138,  366,  140,  135,  135,  349,

      352,  354,  135,  355,  353,  135,  135,  135,  356,  350,
      357,  358,  360,  361,  362,  363,  364,  365,  367,  713,
      368,  713,  713,  366,  713,  371,  373,  713,  374,  372,
      375,  369,  379,  380,  376,  135,  175,  179,  381,  382,
      377,  177,  175,  175,  378,  383,  367,  175,  368,  175,
      175,  181,  178,  371,  373,  370,  374,  372,  375,  369,
      379,  380,  376,  385,  713,  386,  381,  382,  377,  713,
      389,  390,  378,  383,  393,  394,  395,  396,  397,  175,
      175,  175,  179,  370,  399,  400,  177,  175,  175,  401,
      402,  385,  175,  386,  175,  175,  181,  178,  389,  390,

      403,  404,  393,  394,  395,  396,  397,  405,  406,  411,
      407,  713,  399,  400,  713,  408,  410,  401,  402,  413,
      415,  416,  418,  419,  175,  175,  175,  179,  403,  404,
      420,  177,  175,  175,  412,  405,  406,  175,  407,  175,
      175,  181,  178,  408,  410,  421,  422,  413,  415,  416,
      418,  419,  423,  424,  425,  426,  427,  428,  420,  429,
      432,  434,  412,  435,  436,  437,  438,  440,  441,  175,
      175,  442,  443,  421,  422,  444,  439,  445,  446,  447,
      423,  424,  425,  426,  427,  428,  448,  429,  432,  434,
      449,  435,  436,  437,  438,  440,  441,  450,  451,  442,

      443,  452,  453,  444,  439,  445,  446,  447,  456,  457,
      458,  459,  460,  461,  448,  462,  463,  464,  449,  454,
      465,  467,  468,  469,  470,  450,  451,  471,  472,  452,
      453,  473,  474,  479,  480,  477,  456,  457,  458,  459,
      460,  461,  478,  462,  463,  464,  481,  454,  465,  467,
      468,  469,  470,  482,  483,  471,  472,  485,  486,  473,
      474,  479,  480,  477,  487,  488,  489,  490,  491,  492,
      478,  493,  494,  495,  481,  496,  497,  498,  499,  500,
      501,  482,  483,  503,  505,  485,  486,  506,  507,  508,
      509,  510,  487,  488,  489,  490,  491,  492,  511,  493,

      494,  495,  512,  496,  497,  498,  499,  500,  501,  515,
      516,  503,  505,  517,  518,  506,  507,  508,  509,  510,
      519,  520,  521,  522,  523,  526,  511,  528,  529,  530,
      512,  524,  531,  532,  533,  534,  535,  515,  516,  525,
      536,  517,  518,  537,  539,  540,  541,  542,  519,  520,
      521,  522,  523,  526,  543,  528,  529,  530,  544,  524,
      531,  532,  533,  534,  535,  545,  546,  525,  536,  547,
      548,  537,  539,  540,  541,  542,  550,  551,  552,  553,
      554,  555,  543,  556,  557,  558,  544,  560,  561,  559,
      562,  563,  564,  545,  546,  565,  566,  547,  548,  567,

      568,  569,  570,  571,  550,  551,  552,  553,  554,  555,
      572,  556,  557,  558,  573,  560,  561,  559,  562,  563,
      564,  574,  575,  565,  566,  576,  577,  567,  568,  569,
      570,  571,  578,  579,  580,  582,  583,  584,  572,  585,
      586,  587,  573,  588,  589,  590,  591,  592,  593,  574,
      575,  594,  595,  576,  577,  596,  598,  601,  602,  713,
      578,  579,  580,  582,  583,  584,  603,  585,  586,  587,
      604,  588,  589,  590,  591,  592,  593,  599,  605,  594,
      595,  606,  607,  596,  598,  601,  602,  600,  608,  609,
      610,  611,  612,  613,  603,  614,  615,  616,  604,  617,

      618,  619,  620,  621,  622,  599,  605,  623,  624,  606,
      607,  626,  627,  628,  629,  600,  608,  609,  610,  611,
      612,  613,  630,  614,  615,  616,  631,  617,  618,  619,
      620,  621,  622,  632,  633,  623,  624,  634,  635,  626,
      627,  628,  629,  636,  637,  638,  639,  640,  641,  642,
      630,  643,  644,  645,  631,  646,  647,  648,  649,  651,
      652,  632,  633,  653,  654,  634,  635,  655,  656,  657,
      658,  636,  637,  638,  639,  640,  641,  642,  659,  643,
      644,  645,  660,  646,  647,  648,  649,  651,  652,  661,
      662,  653,  654,  663,  664,  655,  656,  657,  658,  665,

      666,  667,  669,  670,  671,  672,  659,  673,  674,  675,
      660,  676,  677,  678,  679,  680,  681,  661,  662,  682,
      683,  663,  664,  684,  685,  686,  687,  665,  666,  667,
      669,  670,  671,  672,  688,  673,  674,  675,  689,  676,
      677,  678,  679,  680,  681,  690,  691,  682,  683,  692,
      693,  684,  685,  686,  687,  694,  695,  696,  697,  698,
      699,  700,  688,  701,  702,  703,  689,  704,  705,  706,
      707,  708,  709,  690,  691,  710,  711,  692,  693,  712,
      713,  713,  713,  694,  695,  696,  697,  698,  699,  700,
      713,  701,  702,  703,  713,  704,  705,  706,  707,  708,

      709,  713,  713,  710,  711,  713,  713,  712,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  142,  713,  713,  142,  142,  713,  713,
      713,  713,  713,  142,  142,  143,  713,  713,  143,  143,
      713,  713,  713,  713,  713,  143,  143,  175,  175,  713,
      175,  175,  175,  175,  175,  175,  175,  175,  713,  175,

      175,  175,  175,  175,  180,  180,  713,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  177,  177,  713,  177,  177,  177,  177,  177,  177,
      177,  177,  713,  177,  177,  177,  177,  177,  182,  713,
      713,  182,  713,  182,  182,  182,  182,  182,  713,  713,
      713,  182,  182,  182,  182,  184,  184,  713,  184,  713,
      184,  184,  184,  184,  184,  713,  184,  713,  184,  184,
      184,  184,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  188,
      188,  188,  188,  713,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  194,  713,  713,  713,  713,
      713,  713,  194,  194,  196,  196,  196,  196,  196,  196,
      196,  713,  196,  196,  196,  196,  196,  196,  219,  219,
      713,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  223,  223,  223,  223,  223,  713,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  233,  713,
      713,  233,  233,  713,  713,  713,  713,  713,  233,  233,
      236,  713,  236,  713,  713,  713,  236,  238,  713,  713,

      238,  238,  713,  238,  713,  713,  713,  238,  238,  238,
      278,  713,  278,  713,  713,  278,  278,  713,  713,  713,
      278,  278,  278,  278,  183,  713,  183,  713,  713,  183,
      183,  713,  713,  713,  183,  713,  183,  183,  280,  713,
      713,  713,  713,  713,  713,  280,  280,  343,  713,  713,
      713,  713,  713,  713,  343,  343,  344,  713,  713,  713,
      713,  713,  713,  344,  344,  387,  713,  713,  713,  713,
      713,  713,  387,  387,  388,  713,  713,  713,  713,  713,
      713,  388,  388,  430,  713,  713,  713,  713,  713,  713,
      430,  430,  431,  713,  713,  713,  713,  713,  713,  431,

      431,  475,  713,  713,  713,  713,  713,  713,  475,  475,
      476,  713,  713,  713,  713,  713,  713,  476,  476,  513,
      713,  713,  713,  713,  713,  713,  513,  513,  514,  713,
      713,  713,  713,  713,  713,  514,  514,  549,  713,  713,
      713,  713,  713,  713,  549,  549,  581,  713,  713,  713,
      713,  713,  713,  581,  581,   31,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,

      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713
    } ;

static yyconst flex_int16_t yy_chk[2328] =
    {   0,
        1,    1,    1,    1,    0,    1,    1,    1,   17,   17,
      654,    1,  633,    1,    1,    1,    1,   11,   11,   11,
       11,   12,   12,   12,   12,   13,   13,   13,   14,   14,
       14,   11,   18,   18,  598,   12,   13,  115,  115,   14,
      226,  226,  581,    1,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    3,    3,    3,    3,
       62,    3,    3,    3,    3,   42,   44,    3,   45,    3,
        3,    3,    3,  278,  278,   62,    7,    7,  567,    7,
        8,    8,   49,    8,   19,   19,   20,   20,   19,   19,
       20,   20,   55,   42,   44,  549,   45,   48,  514,    3,
        3,    4,    4,    4,    4,   48,    4,    4,    4,    4,
       49,   97,    4,   50,    4,    4,    4,    4,    7,   57,
       55,  513,    8,   57,  499,   48,   19,  486,   20,   71,
       71,  476,   71,   48,   57,   53,   43,   99,   50,   97,

       43,   53,   43,  475,    4,    4,    5,    5,    5,    5,
       54,    5,    5,    5,    5,   54,  464,    5,   56,    5,
        5,    5,    5,   53,   43,   99,   50,   41,   43,   53,
       43,   71,  175,  102,  461,  103,  175,  441,   54,  431,
       56,   41,  106,   54,   52,   41,   56,  175,   52,    5,
        5,    6,    6,    6,    6,   41,    6,    6,    6,    6,
       52,  102,    6,  103,    6,    6,    6,    6,   56,   41,
      106,  430,   52,   41,   68,   68,   52,  176,  110,  110,
       68,   68,  110,  110,  421,   68,   96,   68,   52,   68,
      410,   96,  176,  390,    6,    6,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,  388,   96,   70,   70,   68,   68,   96,
      110,   70,   70,  177,  743,  743,   70,  387,   70,  373,
       70,  370,  121,  127,  749,  749,  366,  144,  177,    9,
        9,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   70,   70,
      121,  127,   98,   39,   51,  144,  145,  146,   51,  354,
      348,  347,   39,  145,  344,   98,  105,  343,   51,  340,
      317,   39,   51,  307,   10,   10,   15,   15,   15,  105,
       98,   39,   51,  280,  145,  146,   51,   15,  100,  101,

       39,  145,   15,   98,  105,   15,   51,   15,   15,   39,
       51,   15,  147,  101,   15,   15,   15,  105,  100,  148,
       15,   15,  149,  150,   15,  279,  100,  101,  151,  277,
       15,  152,  153,   15,  154,   15,   15,  156,  269,   15,
      147,  101,   15,   15,   15,  158,  100,  148,   15,   15,
      149,  150,   15,   16,   16,   16,  151,  104,  254,  152,
      153,  104,  154,  252,   16,  156,  157,  157,  161,   16,
      160,  159,   16,  158,   16,   16,  160,  104,   16,  163,
      164,   16,   16,   16,  165,  104,  159,   16,   16,  104,
      166,   16,  223,  200,  157,  157,  161,   16,  160,  159,

       16,  198,   16,   16,  160,  104,   16,  163,  164,   16,
       16,   16,  165,  168,  159,   16,   16,  170,  166,   16,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,  162,  167,  171,
      162,  168,  172,  173,  174,  170,  179,  201,  194,  202,
      162,  162,  167,  203,  162,   21,  190,  188,  183,  155,
      179,  179,  138,   21,   21,  162,  167,  171,  162,  133,
      172,  173,  174,  186,  186,  201,  186,  202,  162,  162,
      167,  203,  162,   21,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,  184,  184,  204,  205,  206,  207,  184,  184,  208,
      210,  208,  184,  211,  184,  186,  184,  125,  212,   22,
      119,  112,  109,   95,  213,   94,   90,   22,   22,  214,
       89,  204,  205,  206,  207,   84,   80,  208,  210,  208,
       79,  211,  215,  216,  184,  184,  212,   22,   23,   23,
       23,   23,  213,   23,   23,   23,  217,  214,  209,   23,
      218,   23,   23,   23,   23,  209,  231,  234,   23,   75,
      215,  216,  221,  221,   73,   35,  221,  221,  239,  240,
       31,  241,   26,   25,  217,    0,  209,  242,  218,    0,
      243,   23,   23,  209,  231,  234,   23,   24,   24,   24,

       24,  244,   24,   24,   24,  245,  239,  240,   24,  241,
       24,   24,   24,   24,  221,  242,  246,   24,  243,    0,
        0,  247,  248,  249,  250,  251,  253,    0,  255,  244,
        0,  256,  257,  245,    0,    0,    0,    0,    0,    0,
       24,   24,  259,    0,  246,   24,   27,   27,   27,  247,
      248,  249,  250,  251,  253,   27,  255,   27,   27,  256,
      257,  260,   27,   27,   27,   27,   27,   27,    0,    0,
      259,  258,  261,  262,  263,  264,  265,    0,  258,    0,
        0,  266,  267,  268,    0,    0,    0,    0,    0,  260,
       27,   27,   27,   27,   27,   27,   28,   28,   28,  258,

      261,  262,  263,  264,  265,   28,  258,   28,   28,  266,
      267,  268,   28,   28,   28,   28,   28,   28,    0,    0,
        0,    0,  270,    0,    0,    0,  271,  272,  273,    0,
      274,  270,    0,    0,    0,  276,  302,  303,  304,  305,
       28,   28,   28,   28,   28,   28,   29,   29,   29,   29,
      270,   29,   29,   29,  271,  272,  273,   29,  274,  270,
       29,   29,   29,  276,  302,  303,  304,  305,    0,    0,
        0,  306,  308,  311,    0,  312,  308,    0,    0,    0,
      313,  306,  315,  316,  318,  319,  320,  321,  322,  323,
       29,   30,   30,   30,   30,  324,   30,   30,   30,  306,

      308,  311,   30,  312,  308,   30,   30,   30,  313,  306,
      315,  316,  318,  319,  320,  321,  322,  323,  326,    0,
      327,    0,    0,  324,    0,  329,  330,    0,  331,  329,
      333,  328,  335,  336,  333,   30,   61,   61,  337,  338,
      334,   61,   61,   61,  334,  339,  326,   61,  327,   61,
       61,   61,   61,  329,  330,  328,  331,  329,  333,  328,
      335,  336,  333,  341,    0,  342,  337,  338,  334,    0,
      345,  346,  334,  339,  349,  350,  351,  352,  353,   61,
       61,   63,   63,  328,  356,  357,   63,   63,   63,  358,
      359,  341,   63,  342,   63,   63,   63,   63,  345,  346,

      360,  361,  349,  350,  351,  352,  353,  362,  363,  368,
      364,    0,  356,  357,    0,  365,  367,  358,  359,  369,
      371,  372,  375,  376,   63,   63,  180,  180,  360,  361,
      377,  180,  180,  180,  368,  362,  363,  180,  364,  180,
      180,  180,  180,  365,  367,  378,  379,  369,  371,  372,
      375,  376,  380,  381,  382,  383,  384,  385,  377,  386,
      389,  391,  368,  392,  393,  394,  395,  396,  397,  180,
      180,  398,  399,  378,  379,  400,  395,  401,  402,  403,
      380,  381,  382,  383,  384,  385,  404,  386,  389,  391,
      405,  392,  393,  394,  395,  396,  397,  406,  407,  398,

      399,  408,  409,  400,  395,  401,  402,  403,  411,  411,
      412,  413,  414,  415,  404,  416,  417,  419,  405,  409,
      420,  422,  423,  424,  425,  406,  407,  426,  427,  408,
      409,  428,  429,  434,  435,  433,  411,  411,  412,  413,
      414,  415,  433,  416,  417,  419,  436,  409,  420,  422,
      423,  424,  425,  437,  439,  426,  427,  442,  444,  428,
      429,  434,  435,  433,  445,  446,  447,  448,  449,  450,
      433,  451,  453,  454,  436,  455,  456,  457,  458,  459,
      460,  437,  439,  463,  465,  442,  444,  466,  468,  469,
      470,  471,  445,  446,  447,  448,  449,  450,  472,  451,

      453,  454,  474,  455,  456,  457,  458,  459,  460,  477,
      478,  463,  465,  479,  480,  466,  468,  469,  470,  471,
      481,  482,  483,  484,  484,  485,  472,  487,  488,  489,
      474,  484,  490,  491,  492,  494,  495,  477,  478,  484,
      496,  479,  480,  497,  502,  503,  504,  506,  481,  482,
      483,  484,  484,  485,  507,  487,  488,  489,  508,  484,
      490,  491,  492,  494,  495,  509,  510,  484,  496,  511,
      512,  497,  502,  503,  504,  506,  515,  516,  517,  518,
      519,  520,  507,  522,  523,  524,  508,  525,  526,  524,
      527,  528,  529,  509,  510,  530,  531,  511,  512,  532,

      533,  534,  535,  536,  515,  516,  517,  518,  519,  520,
      538,  522,  523,  524,  539,  525,  526,  524,  527,  528,
      529,  540,  541,  530,  531,  542,  543,  532,  533,  534,
      535,  536,  546,  547,  548,  550,  551,  553,  538,  554,
      555,  556,  539,  557,  558,  559,  560,  562,  563,  540,
      541,  564,  565,  542,  543,  566,  568,  570,  571,    0,
      546,  547,  548,  550,  551,  553,  572,  554,  555,  556,
      573,  557,  558,  559,  560,  562,  563,  569,  574,  564,
      565,  575,  576,  566,  568,  570,  571,  569,  577,  578,
      580,  582,  583,  584,  572,  585,  586,  587,  573,  588,

      589,  590,  591,  593,  594,  569,  574,  596,  597,  575,
      576,  599,  600,  601,  602,  569,  577,  578,  580,  582,
      583,  584,  604,  585,  586,  587,  606,  588,  589,  590,
      591,  593,  594,  607,  608,  596,  597,  610,  611,  599,
      600,  601,  602,  612,  614,  615,  616,  617,  618,  619,
      604,  624,  625,  626,  606,  627,  628,  630,  631,  634,
      635,  607,  608,  636,  637,  610,  611,  639,  640,  641,
      642,  612,  614,  615,  616,  617,  618,  619,  643,  624,
      625,  626,  644,  627,  628,  630,  631,  634,  635,  645,
      646,  636,  637,  648,  650,  639,  640,  641,  642,  651,

      652,  653,  655,  656,  657,  659,  643,  660,  661,  662,
      644,  663,  664,  665,  668,  669,  670,  645,  646,  671,
      672,  648,  650,  673,  674,  675,  676,  651,  652,  653,
      655,  656,  657,  659,  677,  660,  661,  662,  678,  663,
      664,  665,  668,  669,  670,  679,  680,  671,  672,  683,
      684,  673,  674,  675,  676,  685,  686,  687,  688,  690,
      691,  692,  677,  693,  694,  695,  678,  696,  697,  698,
      699,  700,  701,  679,  680,  703,  704,  683,  684,  709,
        0,    0,    0,  685,  686,  687,  688,  690,  691,  692,
        0,  693,  694,  695,    0,  696,  697,  698,  699,  700,

      701,    0,    0,  703,  704,    0,    0,  709,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  725,  725,  725,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  729,    0,    0,  729,  729,    0,    0,
        0,    0,    0,  729,  729,  730,    0,    0,  730,  730,
        0,    0,    0,    0,    0,  730,  730,  731,  731,    0,
      731,  731,  731,  731,  731,  731,  731,  731,    0,  731,

      731,  731,  731,  731,  732,  732,    0,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  733,  733,    0,  733,  733,  733,  733,  733,  733,
      733,  733,    0,  733,  733,  733,  733,  733,  734,    0,
        0,  734,    0,  734,  734,  734,  734,  734,    0,    0,
        0,  734,  734,  734,  734,  735,  735,    0,  735,    0,
      735,  735,  735,  735,  735,    0,  735,    0,  735,  735,
      735,  735,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  737,
      737,  737,  737,    0,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  738,    0,    0,    0,    0,
        0,    0,  738,  738,  739,  739,  739,  739,  739,  739,
      739,    0,  739,  739,  739,  739,  739,  739,  740,  740,
        0,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  742,  742,  742,  742,  742,    0,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  744,    0,
        0,  744,  744,    0,    0,    0,    0,    0,  744,  744,
      745,    0,  745,    0,    0,    0,  745,  746,    0,    0,

      746,  746,    0,  746,    0,    0,    0,  746,  746,  746,
      747,    0,  747,    0,    0,  747,  747,    0,    0,    0,
      747,  747,  747,  747,  748,    0,  748,    0,    0,  748,
      748,    0,    0,    0,  748,    0,  748,  748,  750,    0,
        0,    0,    0,    0,    0,  750,  750,  751,    0,    0,
        0,    0,    0,    0,  751,  751,  752,    0,    0,    0,
        0,    0,    0,  752,  752,  753,    0,    0,    0,    0,
        0,    0,  753,  753,  754,    0,    0,    0,    0,    0,
        0,  754,  754,  755,    0,    0,    0,    0,    0,    0,
      755,  755,  756,    0,    0,    0,    0,    0,    0,  756,

      756,  757,    0,    0,    0,    0,    0,    0,  757,  757,
      758,    0,    0,    0,    0,    0,    0,  758,  758,  759,
        0,    0,    0,    0,    0,    0,  759,  759,  760,    0,
        0,    0,    0,    0,    0,  760,  760,  761,    0,    0,
        0,    0,    0,    0,  761,  761,  762,    0,    0,    0,
        0,    0,    0,  762,  762,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,

      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.lxx"
/*
    Copyright (C) 2005-2009  Michel de Boer <michel@twinklephone.com>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#line 20 "scanner.lxx"
#include <cstdio>
#include <cstring>
#include <math.h>
#include <string>
#include "parse_ctrl.h"
#include "parser.h"
#include "util.h"
#include "audits/memman.h"

using namespace std;














#line 1433 "scanner.cxx"

#define INITIAL 0
#define C_URI 1
#define C_URI_SPECIAL 2
#define C_QSTRING 3
#define C_LANG 4
#define C_WORD 5
#define C_NUM 6
#define C_DATE 7
#define C_LINE 8
#define C_COMMENT 9
#define C_NEW 10
#define C_AUTH_SCHEME 11
#define C_RPAREN 12
#define C_IPV6ADDR 13
#define C_PARAMVAL 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 58 "scanner.lxx"

	switch (t_parser::context) {
	case t_parser::X_URI:		BEGIN(C_URI); break;
	case t_parser::X_URI_SPECIAL:	BEGIN(C_URI_SPECIAL); break;
	case t_parser::X_LANG:		BEGIN(C_LANG); break;
	case t_parser::X_WORD:		BEGIN(C_WORD); break;
	case t_parser::X_NUM:		BEGIN(C_NUM); break;
	case t_parser::X_DATE:		BEGIN(C_DATE); break;
	case t_parser::X_LINE:		BEGIN(C_LINE); break;
	case t_parser::X_COMMENT:	BEGIN(C_COMMENT); break;
	case t_parser::X_NEW:		BEGIN(C_NEW); break;
	case t_parser::X_AUTH_SCHEME:	BEGIN(C_AUTH_SCHEME); break;
	case t_parser::X_IPV6ADDR:	BEGIN(C_IPV6ADDR); break;
	case t_parser::X_PARAMVAL:	BEGIN(C_PARAMVAL); break;
	default:			BEGIN(INITIAL);
	}

	/* Headers */
#line 1666 "scanner.cxx"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 714 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2256 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 76 "scanner.lxx"
{ return T_HDR_ACCEPT; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "scanner.lxx"
{ return T_HDR_ACCEPT_ENCODING; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "scanner.lxx"
{ return T_HDR_ACCEPT_LANGUAGE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "scanner.lxx"
{ return T_HDR_ALERT_INFO; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "scanner.lxx"
{ return T_HDR_ALLOW; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "scanner.lxx"
{ return T_HDR_ALLOW_EVENTS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "scanner.lxx"
{ return T_HDR_AUTHENTICATION_INFO; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "scanner.lxx"
{ return T_HDR_AUTHORIZATION; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "scanner.lxx"
{ return T_HDR_CALL_ID; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "scanner.lxx"
{ return T_HDR_CALL_INFO; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "scanner.lxx"
{ return T_HDR_CONTACT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "scanner.lxx"
{ return T_HDR_CONTENT_DISP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "scanner.lxx"
{ return T_HDR_CONTENT_ENCODING; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "scanner.lxx"
{ return T_HDR_CONTENT_LANGUAGE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "scanner.lxx"
{ return T_HDR_CONTENT_LENGTH; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "scanner.lxx"
{ return T_HDR_CONTENT_TYPE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "scanner.lxx"
{ return T_HDR_CSEQ; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "scanner.lxx"
{ return T_HDR_DATE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "scanner.lxx"
{ return T_HDR_ERROR_INFO; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "scanner.lxx"
{ return T_HDR_EVENT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "scanner.lxx"
{ return T_HDR_EXPIRES; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "scanner.lxx"
{ return T_HDR_FROM; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "scanner.lxx"
{ return T_HDR_IN_REPLY_TO; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "scanner.lxx"
{ return T_HDR_MAX_FORWARDS; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "scanner.lxx"
{ return T_HDR_MIN_EXPIRES; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "scanner.lxx"
{ return T_HDR_MIME_VERSION; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "scanner.lxx"
{ return T_HDR_ORGANIZATION; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "scanner.lxx"
{ return T_HDR_P_ASSERTED_IDENTITY; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "scanner.lxx"
{ return T_HDR_P_PREFERRED_IDENTITY; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "scanner.lxx"
{ return T_HDR_PRIORITY; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "scanner.lxx"
{ return T_HDR_PRIVACY; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "scanner.lxx"
{ return T_HDR_PROXY_AUTHENTICATE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "scanner.lxx"
{ return T_HDR_PROXY_AUTHORIZATION; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "scanner.lxx"
{ return T_HDR_PROXY_REQUIRE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "scanner.lxx"
{ return T_HDR_RACK; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "scanner.lxx"
{ return T_HDR_RECORD_ROUTE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "scanner.lxx"
{ return T_HDR_SERVICE_ROUTE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "scanner.lxx"
{ return T_HDR_REFER_SUB; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "scanner.lxx"
{ return T_HDR_REFER_TO; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "scanner.lxx"
{ return T_HDR_REFERRED_BY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "scanner.lxx"
{ return T_HDR_REPLACES; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "scanner.lxx"
{ return T_HDR_REPLY_TO; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "scanner.lxx"
{ return T_HDR_REQUIRE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "scanner.lxx"
{return T_HDR_REQUEST_DISPOSITION; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "scanner.lxx"
{ return T_HDR_RETRY_AFTER; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "scanner.lxx"
{ return T_HDR_ROUTE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "scanner.lxx"
{ return T_HDR_RSEQ; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "scanner.lxx"
{ return T_HDR_SERVER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "scanner.lxx"
{ return T_HDR_SIP_ETAG; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "scanner.lxx"
{ return T_HDR_SIP_IF_MATCH; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "scanner.lxx"
{ return T_HDR_SUBJECT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "scanner.lxx"
{ return T_HDR_SUBSCRIPTION_STATE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "scanner.lxx"
{ return T_HDR_SUPPORTED; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "scanner.lxx"
{ return T_HDR_TIMESTAMP; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "scanner.lxx"
{ return T_HDR_TO; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "scanner.lxx"
{ return T_HDR_UNSUPPORTED; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "scanner.lxx"
{ return T_HDR_USER_AGENT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "scanner.lxx"
{ return T_HDR_VIA; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "scanner.lxx"
{ return T_HDR_WARNING; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "scanner.lxx"
{ return T_HDR_WWW_AUTHENTICATE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
			  MEMMAN_NEW(yylval.yyt_str);
			  return T_HDR_UNKNOWN; }
	YY_BREAK
/* Token as define in RFC 3261 */
case 62:
YY_RULE_SETUP
#line 141 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
		  MEMMAN_NEW(yylval.yyt_str);
		  return T_TOKEN; }
	YY_BREAK
/* Switch to quoted string context */
case 63:
YY_RULE_SETUP
#line 146 "scanner.lxx"
{ yy_push_state(C_QSTRING); }
	YY_BREAK
/* End of line */
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 149 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 150 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 152 "scanner.lxx"
/* Skip white space */
	YY_BREAK
/* Single character token */
case 67:
YY_RULE_SETUP
#line 155 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
/* URI. 
	   This context scans a URI including parameters.
	   The syntax of a URI will be checked outside the scanner 
	 */
case 68:
YY_RULE_SETUP
#line 161 "scanner.lxx"
{ yy_push_state(C_QSTRING); }
	YY_BREAK
case 69:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 162 "scanner.lxx"
{
			yylval.yyt_str = new string(yytext);
			MEMMAN_NEW(yylval.yyt_str);
			return T_DISPLAY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 166 "scanner.lxx"
{
			yylval.yyt_str = new string(yytext);
			MEMMAN_NEW(yylval.yyt_str);
			return T_URI; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "scanner.lxx"
{ return T_URI_WILDCARD; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "scanner.lxx"
{
			yylval.yyt_str = new string(yytext);
			MEMMAN_NEW(yylval.yyt_str);
			return T_URI; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 175 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 176 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 177 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
/* URI special case.
	   In several headers (eg. From, To, Contact, Reply-To) the URI
	   can be enclosed by < and >
	   If it is enclosed then parameters belong to the URI, if it
	   is not enclosed then parameters belong to the header.
	   Parameters are seperated by a semi-colon. 
	   For the URI special case, parameters belong to the header.
	   If the parser receives a < from the scanner, then the parser
	   will switch to the normal URI case.
	   The syntax of a URI will be checked outside the scanner 
	 */
case 76:
YY_RULE_SETUP
#line 190 "scanner.lxx"
{ yy_push_state(C_QSTRING); }
	YY_BREAK
case 77:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 191 "scanner.lxx"
{
			yylval.yyt_str = new string(yytext);
			MEMMAN_NEW(yylval.yyt_str);
			return T_DISPLAY; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 195 "scanner.lxx"
{ return T_URI_WILDCARD; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 196 "scanner.lxx"
{
			yylval.yyt_str = new string(yytext);
			MEMMAN_NEW(yylval.yyt_str);
			return T_URI; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 200 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 201 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 202 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
/* Quoted string (starting after open quote, closing quote
	   will be consumed but not returned. */
case 83:
YY_RULE_SETUP
#line 206 "scanner.lxx"
{ yymore(); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 207 "scanner.lxx"
{ yymore(); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 208 "scanner.lxx"
{ yy_pop_state();
			  	  yytext[strlen(yytext)-1] = '\0';
			  	  yylval.yyt_str = new string(unescape(string(yytext)));
				  MEMMAN_NEW(yylval.yyt_str);
			  	  return T_QSTRING; }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 213 "scanner.lxx"
{ yy_pop_state(); return T_ERROR; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 214 "scanner.lxx"
{ yy_pop_state(); return T_ERROR; }
	YY_BREAK
/* Comment (starting after LPAREN till RPAREN) */
case 88:
YY_RULE_SETUP
#line 217 "scanner.lxx"
{ yymore(); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 218 "scanner.lxx"
{ yymore(); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 219 "scanner.lxx"
{ yymore(); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 220 "scanner.lxx"
{ t_parser::inc_comment_level(); yymore(); }
	YY_BREAK
case 92:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 221 "scanner.lxx"
{ if (t_parser::dec_comment_level()) {
					BEGIN(C_RPAREN);
					yymore();
				  } else {
				  	yylval.yyt_str = new string(yytext);
					MEMMAN_NEW(yylval.yyt_str);
			  	  	return T_COMMENT;
				  }
				}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 230 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 231 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 232 "scanner.lxx"
{ BEGIN(C_COMMENT); yymore(); }
	YY_BREAK
/* Language tag */
case 96:
YY_RULE_SETUP
#line 235 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
					  MEMMAN_NEW(yylval.yyt_str);
					  return T_LANG; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 238 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 239 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 240 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 241 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Word */
case 101:
YY_RULE_SETUP
#line 244 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
			  MEMMAN_NEW(yylval.yyt_str);
			  return T_WORD; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 247 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 248 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 249 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 250 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Number */
case 106:
YY_RULE_SETUP
#line 253 "scanner.lxx"
{ yylval.yyt_ulong = strtoul(yytext, NULL, 10); return T_NUM; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 254 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 255 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 256 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 257 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Date */
case 111:
YY_RULE_SETUP
#line 260 "scanner.lxx"
{ yylval.yyt_int = 1; return T_WKDAY; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 261 "scanner.lxx"
{ yylval.yyt_int = 2; return T_WKDAY; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 262 "scanner.lxx"
{ yylval.yyt_int = 3; return T_WKDAY; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 263 "scanner.lxx"
{ yylval.yyt_int = 4; return T_WKDAY; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 264 "scanner.lxx"
{ yylval.yyt_int = 5; return T_WKDAY; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 265 "scanner.lxx"
{ yylval.yyt_int = 6; return T_WKDAY; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 266 "scanner.lxx"
{ yylval.yyt_int = 0; return T_WKDAY; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 267 "scanner.lxx"
{ yylval.yyt_int = 0; return T_MONTH; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 268 "scanner.lxx"
{ yylval.yyt_int = 1; return T_MONTH; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 269 "scanner.lxx"
{ yylval.yyt_int = 2; return T_MONTH; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 270 "scanner.lxx"
{ yylval.yyt_int = 3; return T_MONTH; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 271 "scanner.lxx"
{ yylval.yyt_int = 4; return T_MONTH; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 272 "scanner.lxx"
{ yylval.yyt_int = 5; return T_MONTH; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 273 "scanner.lxx"
{ yylval.yyt_int = 6; return T_MONTH; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 274 "scanner.lxx"
{ yylval.yyt_int = 7; return T_MONTH; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 275 "scanner.lxx"
{ yylval.yyt_int = 8; return T_MONTH; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 276 "scanner.lxx"
{ yylval.yyt_int = 9; return T_MONTH; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 277 "scanner.lxx"
{ yylval.yyt_int = 10; return T_MONTH; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 278 "scanner.lxx"
{ yylval.yyt_int = 11; return T_MONTH; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 279 "scanner.lxx"
{ return T_GMT; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 280 "scanner.lxx"
{ yylval.yyt_ulong = strtoul(yytext, NULL, 10); return T_NUM; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 281 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 282 "scanner.lxx"
{ return yytext[0]; }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 283 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 284 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Get all text till end of line */
case 136:
YY_RULE_SETUP
#line 287 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
			  MEMMAN_NEW(yylval.yyt_str);
			  return T_LINE; }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 290 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 291 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 292 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Start of a new message */
case 140:
YY_RULE_SETUP
#line 295 "scanner.lxx"
{ return T_SIP; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 296 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
			  MEMMAN_NEW(yylval.yyt_str);
			  return T_METHOD; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 299 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 300 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 301 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 302 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Authorization scheme */
case 146:
YY_RULE_SETUP
#line 305 "scanner.lxx"
{ return T_AUTH_DIGEST; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 306 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
			 	  MEMMAN_NEW(yylval.yyt_str);
				  return T_AUTH_OTHER; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 309 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 310 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 311 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 312 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* IPv6 address
	 * NOTE: the validity of the format is not checked here.
	 */
case 152:
YY_RULE_SETUP
#line 317 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
				  MEMMAN_NEW(yylval.yyt_str);
				  return T_IPV6ADDR; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 320 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 321 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 322 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 323 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
/* Parameter values may contain an IPv6 address or reference. */
case 157:
YY_RULE_SETUP
#line 326 "scanner.lxx"
{ yylval.yyt_str = new string(yytext);
				     MEMMAN_NEW(yylval.yyt_str);
				     return T_PARAMVAL; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 329 "scanner.lxx"
{ yy_push_state(C_QSTRING); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 330 "scanner.lxx"
/* Skip white space */
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 331 "scanner.lxx"
{ return T_ERROR; }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 332 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 333 "scanner.lxx"
{ return T_CRLF; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 334 "scanner.lxx"
ECHO;
	YY_BREAK
#line 2711 "scanner.cxx"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(C_URI):
			case YY_STATE_EOF(C_URI_SPECIAL):
			case YY_STATE_EOF(C_QSTRING):
			case YY_STATE_EOF(C_LANG):
			case YY_STATE_EOF(C_WORD):
			case YY_STATE_EOF(C_NUM):
			case YY_STATE_EOF(C_DATE):
			case YY_STATE_EOF(C_LINE):
			case YY_STATE_EOF(C_COMMENT):
			case YY_STATE_EOF(C_NEW):
			case YY_STATE_EOF(C_AUTH_SCHEME):
			case YY_STATE_EOF(C_RPAREN):
			case YY_STATE_EOF(C_IPV6ADDR):
			case YY_STATE_EOF(C_PARAMVAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 714 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 714 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 713);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 334 "scanner.lxx"
