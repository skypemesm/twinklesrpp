.TH "SingleThreadRTPSession" 3 "21 Sep 2010" "ccRTP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SingleThreadRTPSession \- 
.PP
This template class adds the threading aspect to the \fBRTPSessionBase\fP template in one of the many possible ways.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <rtp.h>\fP
.PP
Inherits \fBTRTPSessionBase< RTPDataChannel, RTCPChannel, ServiceQueue >\fP.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSingleThreadRTPSession\fP (const InetHostAddress &ia, tpport_t dataPort=\fBDefaultRTPDataPort\fP, tpport_t controlPort=0, int pri=0, uint32 memberssize=\fBMembershipBookkeeping::defaultMembersHashSize\fP, \fBRTPApplication\fP &app=defaultApplication())"
.br
.ti -1c
.RI "\fBSingleThreadRTPSession\fP (uint32 ssrc, const InetHostAddress &ia, tpport_t dataPort=\fBDefaultRTPDataPort\fP, tpport_t controlPort=0, int pri=0, uint32 memberssize=\fBMembershipBookkeeping::defaultMembersHashSize\fP, \fBRTPApplication\fP &app=defaultApplication())"
.br
.ti -1c
.RI "\fBSingleThreadRTPSession\fP (const InetMcastAddress &ia, tpport_t dataPort=\fBDefaultRTPDataPort\fP, tpport_t controlPort=0, int pri=0, uint32 memberssize=\fBMembershipBookkeeping::defaultMembersHashSize\fP, \fBRTPApplication\fP &app=defaultApplication(), uint32 iface=0)"
.br
.ti -1c
.RI "\fBSingleThreadRTPSession\fP (uint32 ssrc, const InetMcastAddress &ia, tpport_t dataPort=\fBDefaultRTPDataPort\fP, tpport_t controlPort=0, int pri=0, uint32 memberssize=\fBMembershipBookkeeping::defaultMembersHashSize\fP, \fBRTPApplication\fP &app=defaultApplication(), uint32 iface=0)"
.br
.ti -1c
.RI "\fB~SingleThreadRTPSession\fP ()"
.br
.ti -1c
.RI "void \fBstartRunning\fP ()"
.br
.RI "\fIActivate stack and start service thread. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBdisableStack\fP (void)"
.br
.ti -1c
.RI "void \fBenableStack\fP (void)"
.br
.ti -1c
.RI "\fBmicrotimeout_t\fP \fBgetSchedulingTimeout\fP (void)"
.br
.ti -1c
.RI "void \fBcontrolReceptionService\fP (void)"
.br
.ti -1c
.RI "void \fBcontrolTransmissionService\fP (void)"
.br
.ti -1c
.RI "timeval \fBgetRTCPCheckInterval\fP (void)"
.br
.ti -1c
.RI "size_t \fBdispatchDataPacket\fP (void)"
.br
.ti -1c
.RI "virtual void \fBtimerTick\fP (void)"
.br
.ti -1c
.RI "virtual bool \fBisPendingData\fP (\fBmicrotimeout_t\fP timeout)"
.br
.ti -1c
.RI "virtual void \fBrun\fP (void)"
.br
.RI "\fISingle runnable method for this RTP stacks, schedules outgoing and incoming RTP data and RTCP packets. \fP"
.ti -1c
.RI "size_t \fBtakeInDataPacket\fP (void)"
.br
.ti -1c
.RI "size_t \fBdispatchBYE\fP (const std::string &str)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class RTPDataChannel = DualRTPUDPIPv4Channel, class RTCPChannel = DualRTPUDPIPv4Channel, class ServiceQueue = AVPQueue> class SingleThreadRTPSession< RTPDataChannel, RTCPChannel, ServiceQueue >"
This template class adds the threading aspect to the \fBRTPSessionBase\fP template in one of the many possible ways. 

It inherits from a single execution thread that schedules sending of outgoing packets and receipt of incoming packets.
.PP
\fBAuthor:\fP
.RS 4
Federico Montesino Pouzols <fedemp@altern.org> 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
.PP
\fBaudiorx.cpp\fP, \fBaudiotx.cpp\fP, \fBccrtptest.cpp\fP, \fBrtphello.cpp\fP, \fBrtplisten.cpp\fP, and \fBrtpsend.cpp\fP.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::\fBSingleThreadRTPSession\fP (const InetHostAddress & ia, tpport_t dataPort = \fC\fBDefaultRTPDataPort\fP\fP, tpport_t controlPort = \fC0\fP, int pri = \fC0\fP, uint32 memberssize = \fC\fBMembershipBookkeeping::defaultMembersHashSize\fP\fP, \fBRTPApplication\fP & app = \fCdefaultApplication()\fP)\fC [inline]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::\fBSingleThreadRTPSession\fP (uint32 ssrc, const InetHostAddress & ia, tpport_t dataPort = \fC\fBDefaultRTPDataPort\fP\fP, tpport_t controlPort = \fC0\fP, int pri = \fC0\fP, uint32 memberssize = \fC\fBMembershipBookkeeping::defaultMembersHashSize\fP\fP, \fBRTPApplication\fP & app = \fCdefaultApplication()\fP)\fC [inline]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::\fBSingleThreadRTPSession\fP (const InetMcastAddress & ia, tpport_t dataPort = \fC\fBDefaultRTPDataPort\fP\fP, tpport_t controlPort = \fC0\fP, int pri = \fC0\fP, uint32 memberssize = \fC\fBMembershipBookkeeping::defaultMembersHashSize\fP\fP, \fBRTPApplication\fP & app = \fCdefaultApplication()\fP, uint32 iface = \fC0\fP)\fC [inline]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::\fBSingleThreadRTPSession\fP (uint32 ssrc, const InetMcastAddress & ia, tpport_t dataPort = \fC\fBDefaultRTPDataPort\fP\fP, tpport_t controlPort = \fC0\fP, int pri = \fC0\fP, uint32 memberssize = \fC\fBMembershipBookkeeping::defaultMembersHashSize\fP\fP, \fBRTPApplication\fP & app = \fCdefaultApplication()\fP, uint32 iface = \fC0\fP)\fC [inline]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::~\fBSingleThreadRTPSession\fP ()\fC [inline]\fP"
.SH "Member Function Documentation"
.PP 
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> void \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::controlReceptionService (void)\fC [inline, protected]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> void \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::controlTransmissionService (void)\fC [inline, protected]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> void \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::disableStack (void)\fC [inline, protected]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> size_t \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::dispatchBYE (const std::string & str)\fC [inline, protected, virtual]\fP"
.PP
Reimplemented from \fBTRTPSessionBase< RTPDataChannel, RTCPChannel, ServiceQueue >\fP.
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> size_t \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::dispatchDataPacket (void)\fC [inline, protected]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> void \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::enableStack (void)\fC [inline, protected]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> timeval \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::getRTCPCheckInterval (void)\fC [inline, protected]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> \fBmicrotimeout_t\fP \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::getSchedulingTimeout (void)\fC [inline, protected]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> virtual bool \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::isPendingData (\fBmicrotimeout_t\fP timeout)\fC [inline, protected, virtual]\fP"
.PP
Reimplemented from \fBTRTPSessionBase< RTPDataChannel, RTCPChannel, ServiceQueue >\fP.
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> virtual void \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::run (void)\fC [inline, protected, virtual]\fP"
.PP
Single runnable method for this RTP stacks, schedules outgoing and incoming RTP data and RTCP packets. 
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> void \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::startRunning ()\fC [inline]\fP"
.PP
Activate stack and start service thread. 
.PP
\fBExamples: \fP
.in +1c
\fBrtplisten.cpp\fP, and \fBrtpsend.cpp\fP.
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> size_t \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::takeInDataPacket (void)\fC [inline, protected]\fP"
.SS "template<class RTPDataChannel  = DualRTPUDPIPv4Channel, class RTCPChannel  = DualRTPUDPIPv4Channel, class ServiceQueue  = AVPQueue> virtual void \fBSingleThreadRTPSession\fP< RTPDataChannel, RTCPChannel, ServiceQueue >::timerTick (void)\fC [inline, protected, virtual]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for ccRTP from the source code.
